# -*- coding: utf-8 -*-
"""KNN_Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mbm8HSMA7Bn-d-pmX4uuLKUiDoR3OiY4

#K-Nearest Neighbors (KNN) Algorithm
"""

import numpy as np
import pandas as pd
import sklearn.metrics as metrics
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix,accuracy_score

# Data Loading
url='https://gist.githubusercontent.com/curran/a08a1080b88344b0c8a7/raw/0e7a9b0a5d22642a06d3d5b9bcbad9890c8ee534/iris.csv'
df = pd.read_csv(url)
df.head()

"""##Data Exploration"""

plt.figure()
sns.pairplot(df, hue = "species", markers=["o", "s", "D"])
plt.show()

x = df[['sepal_length',	'sepal_width',	'petal_length',	'petal_width']]
y = df['species']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state =3)

#Fitting K-NN classifier to the training set
from sklearn.neighbors import KNeighborsClassifier
knn= KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2 )
knn.fit(x_train, y_train)

predictionsKNN = knn.predict(x_test)
print('Classification Report:\n',classification_report(y_test, predictionsKNN))
print('Confusion Matrix:\n',confusion_matrix(y_test, predictionsKNN))
print('Accuracy Score:',accuracy_score(y_test, predictionsKNN))

"""##Determine the value of k"""

# creating list of K for KNN
from sklearn.model_selection import cross_val_score
k_list = list(range(1,50,2))
# creating list of cv scores
cv_scores = []

# perform 10-fold cross validation
for k in k_list:
    knn = KNeighborsClassifier(n_neighbors=k)
    scores = cross_val_score(knn, x_train, y_train, cv=10, scoring='accuracy')
    cv_scores.append(scores.mean())

# changing to misclassification error
MSE = [1 - x for x in cv_scores]

plt.figure()
plt.figure(figsize=(15,10))
plt.title('The optimal number of neighbors', fontsize=20, fontweight='bold')
plt.xlabel('Number of Neighbors K', fontsize=15)
plt.ylabel('Misclassification Error', fontsize=15)
sns.set_style("whitegrid")
plt.plot(k_list, MSE)

plt.show()

# finding best k
best_k = k_list[MSE.index(min(MSE))]
print("The optimal number of neighbors is %d." % best_k)